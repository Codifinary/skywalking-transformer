// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/collect-otel": {
            "post": {
                "description": "Receives OTLP trace payload and returns it",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Collect OpenTelemetry payload",
                "parameters": [
                    {
                        "description": "OTel Trace Payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/otel.OTelPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/otel.OTelPayload"
                        }
                    }
                }
            }
        },
        "/send-to-otel": {
            "post": {
                "description": "Receives SkyWalking agent payload, converts to OTel, forwards to OTEL backend",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Collect SkyWalking payload and forward to OTEL backend",
                "parameters": [
                    {
                        "description": "SkyWalking Trace Segment",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/skywalking.TraceSegment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v3/management/reportProperties": {
            "post": {
                "description": "Receives agent service/instance properties",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Handle SkyWalking agent property registration",
                "parameters": [
                    {
                        "description": "Instance Properties",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.InstanceProperties"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.InstanceProperties": {
            "type": "object",
            "properties": {
                "properties": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "serviceId": {
                    "type": "string"
                },
                "serviceInstanceId": {
                    "type": "string"
                }
            }
        },
        "otel.Attribute": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/otel.AttributeVal"
                }
            }
        },
        "otel.AttributeVal": {
            "type": "object",
            "properties": {
                "boolValue": {
                    "type": "boolean"
                },
                "intValue": {
                    "type": "integer"
                },
                "stringValue": {
                    "type": "string"
                }
            }
        },
        "otel.OTelPayload": {
            "type": "object",
            "properties": {
                "resourceSpans": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/otel.ResourceSpan"
                    }
                }
            }
        },
        "otel.OTelSpan": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/otel.Attribute"
                    }
                },
                "endTimeUnixNano": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentSpanId": {
                    "type": "string"
                },
                "spanId": {
                    "type": "string"
                },
                "startTimeUnixNano": {
                    "type": "string"
                },
                "traceId": {
                    "type": "string"
                }
            }
        },
        "otel.Resource": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/otel.Attribute"
                    }
                }
            }
        },
        "otel.ResourceSpan": {
            "type": "object",
            "properties": {
                "resource": {
                    "$ref": "#/definitions/otel.Resource"
                },
                "scopeSpans": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/otel.ScopeSpans"
                    }
                }
            }
        },
        "otel.ScopeSpans": {
            "type": "object",
            "properties": {
                "spans": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/otel.OTelSpan"
                    }
                }
            }
        },
        "skywalking.Span": {
            "type": "object",
            "properties": {
                "component": {
                    "type": "string"
                },
                "endTime": {
                    "description": "milliseconds",
                    "type": "integer"
                },
                "isError": {
                    "type": "integer"
                },
                "layer": {
                    "type": "string"
                },
                "operationName": {
                    "type": "string"
                },
                "parentSpanId": {
                    "type": "integer"
                },
                "peer": {
                    "type": "string"
                },
                "spanId": {
                    "type": "integer"
                },
                "spanType": {
                    "description": "Entry, Exit, Local",
                    "type": "string"
                },
                "startTime": {
                    "description": "milliseconds",
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/skywalking.Tag"
                    }
                }
            }
        },
        "skywalking.Tag": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "skywalking.TraceSegment": {
            "type": "object",
            "properties": {
                "service": {
                    "type": "string"
                },
                "serviceInstance": {
                    "type": "string"
                },
                "spans": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/skywalking.Span"
                    }
                },
                "traceId": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "SkyWalking Collector API Example",
	Description:      "This is an example API to receive SkyWalking agent payloads.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
