name: CI/CD Pipeline for SkyWalking Transformer (GHCR Package)

# -------------------------------------
# Triggers: Run on push to main branch
# -------------------------------------
on:
  push:
    branches:
      - main
      - develop
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

# -------------------------------------
# Define Environment Variables
# -------------------------------------
env:
  GHCR_IMAGE: ghcr.io/codifinary/skywalking-transformer:latest
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  packages: write  # Required for pushing to GHCR
  contents: read   # Required for accessing repository contents

# -------------------------------------
# Job 1: CI - Build, Test
# -------------------------------------
jobs:
  ci:
    name: CI - Build, Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/main' || github.event_name == 'push'
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            binary_name: codexray-transformer-linux-amd64
          - os: linux
            arch: arm64
            binary_name: codexray-transformer-linux-arm64
          - os: darwin
            arch: amd64
            binary_name: codexray-transformer-darwin-amd64
          - os: darwin
            arch: arm64
            binary_name: codexray-transformer-darwin-arm64
          - os: windows
            arch: amd64
            binary_name: codexray-transformer-windows-amd64.exe
          - os: windows
            arch: arm64
            binary_name: codexray-transformer-windows-arm64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
        run: |
          go build -a -installsuffix cgo -o ${{ matrix.binary_name }} .
          echo "Binary built: ${{ matrix.binary_name }}"

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.binary_name }}
          path: ${{ matrix.binary_name }}
          retention-days: 30

# -------------------------------------
# Job 2: Build and Push Docker Image to GHCR
# -------------------------------------
  build-and-push:
    name: Build and Push Docker Image to GHCR
    runs-on: ubuntu-latest
    needs: [ci, build-binaries] # Ensures this runs only after CI succeeds
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/'))

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Authenticate with GitHub Container Registry
      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      # Build Docker Image
      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

# -------------------------------------
# Job 3: Security Scan
# -------------------------------------
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.GHCR_IMAGE }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
